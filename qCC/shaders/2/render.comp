#version 450

#extension GL_ARB_gpu_shader_int64 : enable
#extension GL_NV_shader_atomic_int64 : enable

layout(local_size_x = 128, local_size_y = 1) in;

struct Vertex {
	vec3 pos;
}

layout (std430, binding = 0) buffer point_data {
	Vertex vertices[];
};

layout (std430, binding = 1) buffer framebuffer_data {
	uint64_t framebuffer[];
};


uniform mat4 uModelView;
uniform mat4 uProjection;

void main()
{
	vec4 color = vec4(1, 0, 0, 1);

	uint id = gl_GlobalInvocationID.x;
	Vertex v = vertices[id];

	vec4 pos = uProjection * uModelView * vec4(aPos, 1.0);
	pos.xyz = pos.xyz / pos.x;

	if(pos.w <= 0.0 || pos.x < -1.0 || pos.x > 1.0 || pos.y < -1.0 || pos.y > 1.0){
		return;
	}

	ivec2 pixelCoords = ivec2((pos.xy * 0.5 + 0.5) * uImageSize);
	int pixelID = pixelCoords.x + pixelCoords.y * uImageSize.x;

	int64_t depth = floatBitsToInt(pos.w);
	int64_t val64 = (depth << 24) | int64_t(color);

	atomicMin(framebuffer[pixelID], val64);
};
